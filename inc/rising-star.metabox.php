<?php

// meta box for Rising Star

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * First Name = get_post_meta( get_the_ID(), 'rising_star_mbfirst-name', true )
 * Middle Name / Initial = get_post_meta( get_the_ID(), 'rising_star_mbmiddle-name-initial', true )
 * Last Name = get_post_meta( get_the_ID(), 'rising_star_mblast-name', true )
 * Award = get_post_meta( get_the_ID(), 'rising_star_mbaward', true )
 * Title = get_post_meta( get_the_ID(), 'rising_star_mbtitle', true )
 * Year Inducted = get_post_meta( get_the_ID(), 'rising_star_mbyear-inducted', true )
 * Profile Notes (not displayed) = get_post_meta( get_the_ID(), 'rising_star_mbprofile-notes-not-displayed', true )
 */
class Rising_Star_Information {
	private $config = '{"title":"Rising Star Information","prefix":"rising_star_mb","domain":"rising-star-information","class_name":"Rising_Star_Information","context":"normal","priority":"default","cpt":"rising-star","fields":[{"type":"text","label":"First Name","id":"rising_star_mbfirst-name"},{"type":"text","label":"Middle Name \/ Initial","id":"rising_star_mbmiddle-name-initial"},{"type":"text","label":"Last Name","id":"rising_star_mblast-name"},{"type":"select","label":"Award","options":"none : None\r\nrising-star : Rising Star","id":"rising_star_mbaward"},{"type":"text","label":"Title","id":"rising_star_mbtitle"},{"type":"select","label":"Year Inducted","options":"1976 : 1976\r\n1977 : 1977\r\n1978 : 1978\r\n1979 : 1979\r\n1980 : 1980\r\n1981 : 1981\r\n1982 : 1982\r\n1983 : 1983\r\n1984 : 1984\r\n1985 : 1985\r\n1986 : 1986\r\n1987 : 1987\r\n1988 : 1988\r\n1989 : 1989\r\n1990 : 1990\r\n1991 : 1991\r\n1992 : 1992\r\n1993 : 1993\r\n1994 : 1994\r\n1995 : 1995\r\n1996 : 1996\r\n1997 : 1997\r\n1998 : 1998\r\n1999 : 1999\r\n2000 : 2000\r\n2001 : 2001\r\n2002 : 2002\r\n2003 : 2003\r\n2004 : 2004\r\n2005 : 2005\r\n2006 : 2006\r\n2007 : 2007\r\n2008 : 2008\r\n2009 : 2009\r\n2010 : 2010\r\n2011 : 2011\r\n2012 : 2012\r\n2013 : 2013\r\n2014 : 2014\r\n2015 : 2015\r\n2016 : 2016\r\n2017 : 2017\r\n2018 : 2018\r\n2019 : 2019\r\n2020 : 2020\r\n2021 : 2021\r\n2022 : 2022\r\n2023 : 2023\r\n2024 : 2024\r\n2025 : 2025\r\n2026 : 2026\r\n2027 : 2027\r\n2028 : 2028\r\n2029 : 2029\r\n2030 : 2030","id":"rising_star_mbyear-inducted"},{"type":"textarea","label":"Profile Notes (not displayed)","rows":"10","id":"rising_star_mbprofile-notes-not-displayed"}]}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( !empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts = explode( ',', $this->config['cpt'] );
			$parts = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		$this->fields_table();
	}

	private function fields_table() {
		?><table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'select':
				$this->select( $field );
				break;
			case 'textarea':
				$this->textarea( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function input( $field ) {
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function select( $field ) {
		printf(
			'<select id="%s" name="%s">%s</select>',
			$field['id'], $field['id'],
			$this->select_options( $field )
		);
	}

	private function select_selected( $field, $current ) {
		$value = $this->value( $field );
		if ( $value === $current ) {
			return 'selected';
		}
		return '';
	}

	private function select_options( $field ) {
		$output = [];
		$options = explode( "\r\n", $field['options'] );
		$i = 0;
		foreach ( $options as $option ) {
			$pair = explode( ':', $option );
			$pair = array_map( 'trim', $pair );
			$output[] = sprintf(
				'<option %s value="%s"> %s</option>',
				$this->select_selected( $field, $pair[0] ),
				$pair[0], $pair[1]
			);
			$i++;
		}
		return implode( '<br>', $output );
	}

	private function textarea( $field ) {
		printf(
			'<textarea class="regular-text" id="%s" name="%s" rows="%d">%s</textarea>',
			$field['id'], $field['id'],
			isset( $field['rows'] ) ? $field['rows'] : 5,
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

}
new Rising_Star_Information;

